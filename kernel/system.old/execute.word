; @codeonly

; ***********************************************************************************************
; ***********************************************************************************************
;
;		Name : 		execute.word
;		Purpose : 	Word Executor
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		12th November 2018
;
; ***********************************************************************************************
; ***********************************************************************************************

EXEExecuteWord:
		push 	bc
		push 	de
		push 	hl
		push 	hl								; save word address
		call 	DICTFindWord 					; try to find it
		pop 	bc 								; restore word address to BC
		jr 		nc,__EXEEWWordFound
		ld 		h,b 							; put back in HL
		ld 		l,c
		call 	CONSTConvert 					; convert it to a constant
		jr 		nc,__EXEEWVariable 				; and insert that value.
		scf
__EXEEWExit:
		pop 	hl
		pop 	de
		pop 	bc
		ret
;
;		Word found in dictionary
;
__EXEEWWordFound:
		bit 	6,d 							; protected bit set ?
		jr 		nz,__EXEEWProtected
		ld 		a,d
		cp 		14
		jr 		z,__EXEEWVariable
;
;		Found a standard word, copy compiler or immediate, all of which we execute.
;
		call 	COMUTLExecuteEHL 					; execute the word.
		xor 	a 									; exit happy
		jr 		__EXEEWExit
;
;		Found a variable - also used to load a constant
;		
__EXEEWVariable:
		ld 		de,(ARegister)						; move A->B
		ld 		(BRegister),de
		ld 		(ARegister),hl 						; store value in A
		xor 	a 									; exit happy
		jr 		__EXEEWExit
;
;		Tried to execute a protected word.
;
__EXEEWProtected:
		ld 		hl,__EXEEWProtectedMsg
		jp 		ErrorHandler
__EXEEWProtectedMsg:		
		db 		"Word is protected",0